generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:muthu@localhost:5432/mydb"
}

model User {
  id                   String    @id @default(uuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  email                String    @unique
  password             String
  name                 String
  phone                String?
  avatar               String?
  userType             UserType
  verified             Boolean   @default(false)
  verificationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  business             Business?
  consumer             Consumer?
  sessions             Session[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Consumer {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String             @unique
  location         String?
  points           Int                @default(0)
  receiveUpdates   Boolean            @default(false)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrCodes          QRCode[]
  recyclingHistory RecyclingHistory[]
  rewards          RewardRedemption[]
}

model Business {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               String             @unique
  businessName         String
  businessAddress      String
  businessType         String
  description          String?
  logo                 String?
  coverImage           String?
  website              String?
  socialLinks          Json?
  status               BusinessStatus     @default(APPROVED)
  verificationDocument String?
  points               Int                @default(0)
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  recyclingCenters     RecyclingCenter[]
  verifiedQrCodes      RecyclingHistory[]
}

model RecyclingCenter {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  businessId         String
  name               String
  address            String
  latitude           Float?
  longitude          Float?
  operatingHours     Json?
  phone              String?
  email              String?
  website            String?
  image              String?
  description        String?
  acceptedWasteTypes WasteType[]
  pointsPerWasteType Json?
  isActive           Boolean            @default(true)
  business           Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)
  recyclingHistory   RecyclingHistory[]
}

model QRCode {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  consumerId       String
  wasteType        WasteType
  quantity         Float
  unit             String
  description      String?
  photos           String[]
  qrCodeUrl        String
  isVerified       Boolean           @default(false)
  consumer         Consumer          @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  recyclingHistory RecyclingHistory?
}

model RecyclingHistory {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  qrCodeId          String          @unique
  consumerId        String
  businessId        String
  recyclingCenterId String
  pointsEarned      Int
  verifiedAt        DateTime        @default(now())
  notes             String?
  staffName         String?
  photo             String?
  business          Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  consumer          Consumer        @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  qrCode            QRCode          @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  recyclingCenter   RecyclingCenter @relation(fields: [recyclingCenterId], references: [id], onDelete: Cascade)
}

model Reward {
  id          String             @id @default(uuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  description String
  pointsCost  Int
  image       String?
  isActive    Boolean            @default(true)
  quantity    Int?
  redemptions RewardRedemption[]
}

model RewardRedemption {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  consumerId  String
  rewardId    String
  pointsSpent Int
  status      String
  redeemedAt  DateTime?
  consumer    Consumer  @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  reward      Reward    @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

enum UserType {
  CONSUMER
  BUSINESS
}

enum BusinessStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WasteType {
  PAPER
  PLASTIC
  GLASS
  METAL
  ELECTRONICS
  ORGANIC
  TEXTILE
  HAZARDOUS
  OTHER
}
